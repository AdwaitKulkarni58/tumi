import { allow, deny, shield } from 'graphql-shield';
import { GraphQLError } from 'graphql';
import * as Sentry from '@sentry/node';
import { Severity } from '@sentry/node';
import { GraphQLYogaError } from '@graphql-yoga/node';
import { isAdmin, isAuthenticated, isMember } from './rules';

export const permissions = shield(
  {
    Query: {
      blobUploadKey: allow,
      costItem: allow,
      costItemsForEvent: allow,
      currentTenant: allow,
      currentUser: allow,
      event: allow,
      eventRegistrationCode: allow,
      eventRegistrationCodes: allow,
      eventTemplate: isMember,
      eventTemplates: isMember,
      events: allow,
      getPaymentSetupSession: allow,
      invite: allow,
      invites: allow,
      lmuPurchases: isAdmin,
      logStats: isAdmin,
      logs: isAdmin,
      organizers: allow,
      photoShareKey: isAuthenticated,
      photos: isAuthenticated,
      photosOfEvent: allow,
      product: allow,
      productImageKey: isAdmin,
      products: allow,
      purchase: allow,
      purchases: isAdmin,
      registration: isAdmin,
      registrationCount: isAdmin,
      registrations: isAdmin,
      templateCategories: isMember,
      templateCategory: isMember,
      tenants: allow,
      userById: isAdmin,
      userSearchResultNum: isAdmin,
      userWithStatus: isMember,
      users: isAdmin,
    },
    Mutation: {
      addReceiptToCostItem: allow,
      deleteReceipt: allow,
      deleteCostItem: allow,
      verifyDCC: allow,
      updateCostItemsFromTemplate: allow,
      updateEventLocation: allow,
      addOrganizerToEvent: allow,
      changeEventPublication: allow,
      updateEventGeneralInfo: allow,
      updateEventCoreInfo: allow,
      createEventFromTemplate: allow,
      rateEvent: allow,
      registerForEvent: allow,
      deregisterFromEvent: allow,
      createEventOrganizer: allow,
      checkInUser: allow,
      createRegistrationCode: allow,
      useRegistrationCode: allow,
      createSubmissionItem: allow,
      deleteSubmissionItem: allow,
      removeSubmissionFromEvent: allow,
      createSubmissionOnEvent: allow,
      createEventTemplate: allow,
      updateTemplate: allow,
      updateTemplateLocation: allow,
      updateTemplateFinances: allow,
      deleteTemplate: allow,
      useInvite: allow,
      createInvites: allow,
      increaseLineItemQuantity: allow,
      decreaseLineItemQuantity: allow,
      deleteLineItem: allow,
      addLineItemToBasket: allow,
      createPhotoShare: allow,
      updateLeadImage: allow,
      createProduct: allow,
      updateProduct: allow,
      deleteProductImage: allow,
      createProductImage: allow,
      updateAddress: allow,
      updatePurchaseStatus: allow,
      createPurchaseFromCart: allow,
      updateTenant: allow,
      updateProfile: allow,
      updateESNcard: allow,
      verifyEmail: allow,
      updateUserStatus: allow,
      updateUserRole: allow,
      registerUser: allow,
    },
    ActivityLog: allow,
    ActivityLogStat: allow,
    CostItem: allow,
    TumiEvent: allow,
    EventOrganizer: allow,
    EventRegistration: allow,
    EventRegistrationCode: allow,
    EventSubmission: allow,
    EventSubmissionItem: allow,
    EventTemplate: allow,
    EventTemplateCategory: allow,
    Invite: allow,
    LineItem: allow,
    PhotoShare: allow,
    Product: allow,
    ProductImage: allow,
    Purchase: allow,
    Receipt: allow,
    ShoppingCart: allow,
    statistics: allow,
    userHistoryItem: allow,
    lineChartSeriesItem: allow,
    StripePayment: allow,
    StripeUserData: allow,
    paymentSetupSession: allow,
    paymentIntent: allow,
    checkoutSession: allow,
    Tenant: allow,
    Transaction: allow,
    User: allow,
    UsersOfTenants: allow,
  },
  {
    fallbackRule: allow,
    allowExternalErrors: true,
    fallbackError: (err: unknown) => {
      Sentry.addBreadcrumb({
        category: 'shield',
        type: 'debug',
        message: 'Shield not authorized',
        level: Severity.Warning,
      });
      if (err) {
        Sentry.captureException(err);
        if (err instanceof Error) {
          return err;
        }
        if (err instanceof GraphQLYogaError) {
          return err;
        }
        if (err instanceof GraphQLError) {
          return err;
        }
      }
      return new Error('Not authorized!');
    },
  }
);
